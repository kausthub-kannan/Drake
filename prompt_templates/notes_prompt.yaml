_type: few_shot
example_prompt:
  _type: prompt
  input_types: {}
  input_variables:
  - content_chunk
  - notes
  - rules
  metadata: null
  name: null
  output_parser: null
  partial_variables: {}
  tags: null
  template: "\n<Content Chunk> {content_chunk}\n \n<Rules> {rules}\n \n<Notes> {notes}\n"
  template_format: f-string
  validate_template: false
example_selector: null
example_separator: '


  '
examples:
- content_chunk: "The cyclic redundancy check codes are popularly employed in LANs\
    \ and WANs for error correction. The principle of operation of CRC encoders and\
    \ decoders can be better explained with the following examples. CRC is the most\
    \ powerful and easy to implement technique.CRC is based on binary division. In\
    \ CRC, a sequence of redundant bits, are appended to the end of data unit so that\
    \ the resulting data unit becomes exactly divisible by a second, predetermined\
    \ binary number. At the destination, the incoming data unit is divided by the\
    \ same number. If at this step there is no remainder, the data unit is assumed\
    \ to be correct and is therefore accepted. A remainder indicates that the data\
    \ unit has been damaged in transit and therefore must be rejected. The binary\
    \ number, which is (r+1) bit in length, can also be considered as the coefficients\
    \ of a polynomial, called Generator Polynomial. PERFORMANCE OF CRC CRC is a very\
    \ effective error detection technique. If the divisor is chosen according to the\
    \ previously mentioned rules, its performance can be summarized as follows. CRC\
    \ can detect all single-bit errors and double bit errors (three 1\u2019s). CRC\
    \ can detect any odd number of errors (X+1) and it can also detect all burst errors\
    \ of less than the degree of the polynomial. 1. The Sender follows the given steps:\
    \   2.   The block unit is divided into k sections, and each of n bits.   3. \
    \  4.   5.   All the k sections are added together by using one's complement to\
    \ get the sum.   The sum is complemented and it becomes the checksum field.  \
    \ The original data and checksum field are sent across the network.   Checksum\
    \ Checker A Checksum is verified at the receiving side. The receiver subdivides\
    \ the incoming data into equal segments of n bits each, and all these segments\
    \ are added together, and then this sum is complemented. If the complement of\
    \ the sum is zero, then the data is accepted otherwise data is rejected. 1. The\
    \ Receiver follows the given steps:   2.   The block unit is divided into k sections\
    \ and each of n bits.   3.   4.   5.   All the k sections are added together by\
    \ using one's complement algorithm to get the sum.   The sum is complemented.\
    \   If the result of the sum is zero, then the data is accepted otherwise the\
    \ data is discarded.   Cyclic Redundancy Check (CRC) CRC is a redundancy error\
    \ technique used to determine the error. Following are the steps used in CRC for\
    \ error detection: - In CRC technique, a string of n 0s is appended to the data\
    \ unit, and this n number is less than the number of bits in a predetermined number,\
    \ known as division which is n+1 bits. - Secondly, the newly extended data is\
    \ divided by a divisor using a process is known as binary division. The remainder\
    \ generated from this division is known as CRC remainder. - Thirdly, the CRC remainder\
    \ replaces the appended 0s at the end of the original data. This newly generated\
    \ unit is sent to the receiver. - The receiver receives the data followed by the\
    \ CRC remainder. The receiver will treat this whole unit as a single unit, and\
    \ it is divided by the same divisor that was used to find the CRC remainder. If\
    \ the resultant of this division is zero which means that it has no error, and\
    \ the data is accepted. If the resultant of this division is not zero which means\
    \ that the data consists of an error. Therefore, the data is discarded."
  notes: "# CRC (Cyclic Redundancy Check) Encoder and Decoder \n- They are popularly\
    \ employed in LANs and WANs for error correction. \n- Based on binary division\
    \ - a sequence of redundant bits are appended to the end of the data unit so that\
    \ the resulting data unit becomes exactly divisible by a predetermined binary\
    \ number.\n- At destination, if there is no remainder, it is assumed to be correct.\
    \ A remainder indicates data unit is damaged and therefore rejected. \n- The binary\
    \ number (r+1 bits by length) can be considered coefficients of a polynomial,\
    \ called Generator Polynomial. \n- It is very effective, since it can detect all\
    \ single-bit errors and double bit errors, odd number of errors and also burst\
    \ errors of lesser degree than the polynomial. \n- It consists of two components,\
    \ a generator and a checker.\n  1. **CRC Generator**: uses modulo 2 division.\
    \ n 0s are appended to the end if divisor contains n+1 units. The remainder generated\
    \ is called CRC remainder which replaces the appended string of 0s with itself\
    \ and the final string is sent across the network.\n  2. **CRC Checker:** performs\
    \ modulo 2 division to the number received from generator by the same divisor,\
    \ and data is accepted if remainder is zero. \n\n- **CRC Algorithm:**\n  1. Append\
    \ a string of n 0s to the data unit, where n < the predetermined number of bits\
    \ in the divisor (n+1 bits).\n  2. Perform binary division between the extended\
    \ data and the divisor to obtain the CRC remainder.\n  3. Replace the appended\
    \ 0s at the end of the original data with the CRC remainder.\n  4. Transmit the\
    \ newly generated unit to the receiver.\n  5. Upon reception, treat the data and\
    \ CRC remainder as a single unit and divide it by the same divisor used earlier\
    \ to determine the CRC remainder."
  rules: "- Follow the Markdown format for creating notes as shown in the example.\
    \ \n - The heading of the content should be the title of the markdown file. \n\
    \ - Create subheadings for each section. \n - Use numbered bullet points for each\
    \ point."
- content_chunk: "Meaning/Defination: A content delivery network (CDN) is a group\
    \ of geographically\ndistributed servers that speed up the delivery of web content\
    \ by bringing it closer to where\nusers are.\n\_It is a network of strategically\
    \ positioned servers aimed at enhancing the speed and\ndependability of delivering\
    \ content to users in different locations. These servers store cached\ncopies\
    \ of content, ranging from web pages to videos, guaranteeing that when a user\
    \ makes\na request, it\u2019s served from the closest server available. This reduces\
    \ delays and speeds up\nloading times.\nWhen a user requests specific content,\
    \ CDN architecture comes into play. It directs the\nrequest to the nearest server,\
    \ taking into account factors like server health and proximity.\nThis approach\
    \ minimizes data travel distance, resulting in fast and efficient content delivery.\n\
    Analogy: You could think of a CDN like an ATM. If your money were only available\
    \ from one\nbank in town, you\u2019d have to make a time-consuming trip and stand\
    \ in a long line every time\nyou wanted to withdraw cash. However, with a cash\
    \ machine on practically every corner,\nyou have fast and easy access to your\
    \ money any time you need it.\n\nWhat is The Use of a Content Distribution Network?\n\
    CDNs are designed to optimize the delivery of web content, and some of the main\n\
    advantages that they provide to a company and its users include:\n\uF0B7 Faster\
    \ Load Times:\_CDNs cache content geographically close to its users,\ndecreasing\
    \ the distance that requests and responses need to travel.\_ As a result,\nusers\
    \ experience faster load times for webpages, which can increase conversions\n\
    and decrease bounce rates. How does a CDN improve page load time?: As\nmentioned\
    \ earlier, it is a globally distributed network of servers that store (commonly\n\
    referred to as &quot;cache&quot;) and deliver some or all of your website&#39;s\
    \ content. Each of\nthese servers in the CDN&#39;s network is called a Point of\
    \ Presence (PoP) or an edge\nserver.\n\uF0B7 Reduced Bandwidth Costs:\_Serving\
    \ all requested content from the origin server\nrequires significant bandwidth\
    \ and processing power at the origin. CDNs reduce load\nand bandwidth requirements\
    \ at the bandwidth by caching static content and\nperforming other optimizations.\
    \ Of course, this helps to greatly reduce costs.\n\uF0B7 Improved Availability\
    \ and Redundancy:\_Reliance on centralized infrastructure \u2014\nsuch as serving\
    \ all content from the origin server \u2014 increases the risk of downtime\ndue\
    \ to hardware failures, network outages, and other events. CDNs distribute content\n\
    and requests across multiple locations, reducing the impact of a localized outage.\n\
    With a CDN coming into the picture, it does two things. One, a lot of traffic\
    \ doesn&#39;t\neven come to your servers. The edge server of the CDN serves a\
    \ lot of content from\nits cache. So, you need a slightly fewer number of servers.\n\
    Second, as long as the content is available in the CDNs cache, even if your actual\
    \ servers\nare not working, the CDN will keep serving the content. This gives\
    \ you some buffer time to\nfix issues on your servers while the CDN serves whatever\
    \ content it can from its cache.\n\n\uF0B7 Enhanced Website Security:\_In addition\
    \ to optimizing access to web content, a\nCDN may incorporate security functionality.\_\
    \ By blocking distributed denial-of-service\n(DDoS) attacks, enhancing digital\
    \ certificate security, and other security controls,\nCDNs can reduce the probability\
    \ and impact of a cyberattack.\n\uF0B7 Web security: if a CDN can isolate bad\
    \ traffic from good traffic, it can stop all the\nbad traffic from coming to your\
    \ servers. Your servers only respond to the &quot;good&quot;\nrequests coming\
    \ from actual users."
  notes: "# CDNs\n- A content delivery network (CDN) is a group of geographically\
    \ distributed servers that speed up the delivery of web content by bringing it\
    \ closer to where users are. \n- It is a network of strategically positioned servers\
    \ aimed at enhancing the speed and dependability of delivering content to users\
    \ in different locations. \n- These servers store cached copies of content, ranging\
    \ from web pages to videos, guaranteeing that when a user makes a request, it\u2019\
    s served from the closest server available. This reduces delays and speeds up\
    \ loading times.\n- When a user requests specific content, CDN architecture comes\
    \ into play. It directs the request to the nearest server, taking into account\
    \ factors like server health and proximity. This approach minimizes data travel\
    \ distance, resulting in fast and efficient content delivery.\n- CDNs are designed\
    \ to optimize the delivery of web content, and some of the main advantages that\
    \ they provide to a company and its users include:\n- Faster Load Times:\_CDNs\
    \ cache content geographically close to its users, decreasing the distance that\
    \ requests and responses need to travel.\_ As a result, users experience faster\
    \ load times for webpages, which can increase conversions and decrease bounce\
    \ rates. How does a CDN improve page load time?: As mentioned earlier, it is a\
    \ globally distributed network of servers that store (commonly referred to as\
    \ \"cache\") and deliver some or all of your website's content. Each of these\
    \ servers in the CDN's network is called a Point of Presence (PoP) or an edge\
    \ server.\n- **Reduced Bandwidth Costs:**\_Serving all requested content from\
    \ the origin server requires significant bandwidth and processing power at the\
    \ origin. CDNs reduce load and bandwidth requirements at the bandwidth by caching\
    \ static content and performing other optimizations. Of course, this helps to\
    \ greatly reduce costs.\n- **Improved Availability and Redundancy:**\_Reliance\
    \ on centralized infrastructure \u2014 such as serving all content from the origin\
    \ server \u2014 increases the risk of downtime due to hardware failures, network\
    \ outages, and other events. CDNs distribute content and requests across multiple\
    \ locations, reducing the impact of a localized outage. With a CDN coming into\
    \ the picture, it does two things. One, a lot of traffic doesn&#39;t even come\
    \ to your servers. The edge server of the CDN serves a lot of content from its\
    \ cache. So, you need a slightly fewer number of servers.\n- Second, as long as\
    \ the content is available in the CDNs cache, even if your actual servers are\
    \ not working, the CDN will keep serving the content. This gives you some buffer\
    \ time to fix issues on your servers while the CDN serves whatever content it\
    \ can from its cache.\n- Enhanced Website Security:\_In addition to optimizing\
    \ access to web content, a CDN may incorporate security functionality.\_ By blocking\
    \ distributed denial-of-service(DDoS) attacks, enhancing digital certificate security,\
    \ and other security controls, CDNs can reduce the probability and impact of a\
    \ cyberattack.\n- Web security: if a CDN can isolate bad traffic from good traffic,\
    \ it can stop all the bad traffic from coming to your servers. Your servers only\
    \ respond to the \"good\" requests coming from actual users. "
  rules: "- Follow the Markdown format for creating notes as shown in the example.\
    \ \n - The heading of the content should be the title of the markdown file. \n\
    \ - Create subheadings for each section. \n - Use numbered bullet points for each\
    \ point."
input_types: {}
input_variables:
- content_chunk
- rules
metadata: null
name: null
output_parser: null
partial_variables: {}
prefix: '

  You are assigned a task to create notes for a student.

  You have to create notes based on the below content chunk which is part if a huger
  document.

  Note to follow the rules given below.

  '
suffix: "\n<Content Chunk> {content_chunk}\n \n<Rules> {rules}\n \n<Notes>\n"
tags: null
template_format: f-string
validate_template: false
